CacheMAnager：
	用来创建、管理、管理多个命名唯一的cache，如组织机构缓存、菜单项的缓存、菜单树的缓存等
Cache类似map那样的key-value存储结构，value部分包含了缓存的对象，通过key来获取缓存对象
缓存项：
	存放在缓存里的对象，常常需要实现序列化接口，以支持分布式缓存
Cache存储方式：
	缓存组件可以将对象放到内存或其他缓存服务器上，springboot提供了一个基于ConcurrentMap的缓存，同时也集成了redis、ehCache、
	jCache缓存服务器等
缓存策略：
	通常cache还可以有不同的缓存策略，如设置缓存最大的容量，缓存项的过期时间等
分布式缓存：
	缓存通常按照缓存数据类型存放在不同缓存服务器上，或者同一类型的缓存按照某种算法、不同key的数据存放在不同的缓存服务器上
Cache hit：
	从cache中取得期望的缓存项，我们称之为命中率。如果没有命中则称之为Cache miss，意味着需要从数据来源处重新取出并放回cache中
Cache miss：
	缓存丢失，根据key没有从缓存中找到对应的缓存项
Cache Evication：
	缓存清除操作
hot data：
	热点数据，缓存系统能调整算法或者内部存储方式，使得最有可能频繁访问的数据能被尽快访问到
on-heap：
	java分配对象都是在堆内存中，有最快的获取速度，由于虚拟机的垃圾回收机制，缓存放入过多的对象会导致垃圾回收时间过长，有可能影响性
	能。
off-heap：
	堆外内存，对象存放在虚拟机分配的堆外内存中，因此不受垃圾回收机制的管理，不影响系统性能，但堆外内存的对象要被使用，还要序列化成堆
	内对象。很多缓存工具会把不常用的对象放到堆外，把热点数据放到堆内